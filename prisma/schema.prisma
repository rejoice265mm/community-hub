// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  userId Int @id @default(autoincrement()) @map("userId")
  email String @unique @map("email")
  password String @map("password")
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")

  UserInfos UserInfos?  
  Posts Posts[]     
  Comments Comments[]

  @@map("Users")
}
model Posts {
  postId Int @id @default(autoincrement()) @map("postId")
  UserId Int @map("UserId")
  title String @map("title")
  content String  @map("content") @db.Text
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")

  Comments Comments[]
  User Users @relation(fields: [UserId], references: [userId],onDelete : Cascade)
  
  @@map("Posts")
}
model UserInfos {
  userinfoId Int @id @default(autoincrement()) @map("userinfoId")
  UserId Int @unique @map("UserId")
  name String @map("name")
  age Int? @map("age")
  gender String @map("gender")
  profileImage String? @map(" profileImage")
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")

  User Users @relation(fields: [UserId], references: [userId],onDelete : Cascade)

  @@map("UserInfos")
}
model Comments {
  commentId Int @id @default(autoincrement()) @map("commentId") 
  PostId Int @map("PostId")
  UserId Int @map("UserId")
  content String @map("content")
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")

  Post Posts @relation(fields: [PostId], references: [postId],onDelete : Cascade)
  User Users @relation(fields: [UserId], references: [userId],onDelete : Cascade)
 
  @@map("Comments")
}Â 